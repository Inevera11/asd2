Korzystając z wyników zadań A oraz B z zestawu 1 oraz zadania B z obecnego zestawu proszę się zastanowić która implementacja jest lepsza i w jakiej sytuacji.

1. SetSimple: Jest to implementacja, która znaczy indeks odpowiadający danemu intigerowi jako true. Pamięć którą zużywa musi być co najmniej tak duża jak największa przechowywana liczba, nie ma również obsługi licz ujemnych, zmiennoprzecinkowych ani żadnego innego typu danych. Sam dostęp do elementów jest jednak szybki (używa pod spodem kontenera vector), więc odbywa się w czasie O(1).

2. LinkedSet: Zbiór oparty na liście powiązanej posortowanej, więc operacje takie jak dodawanie, usuwanie i wyszukiwanie mogą wymagać przeszukiwania całej listy, co skutkuje liniową złożonością czasową O(n) dla większości operacji. Zaletą jest przechowywanie różnych typów danych.

3. SetHashed: Implementacja zbioru wykorzystująca haszowanie i LinkedSet, co pozwala na uzyskanie średniej złożoności O(1) dla operacji takich jak dodawanie, wyszukiwanie i usuwanie przy odpowiednim rozłożeniu danych, w najgorszej sytuacji złożoność może być O(n). Może wprowadzać dodatkowe koszty w przypadku kolizji haszy.

Porównanie wydajności
Testy badają trzy główne operacje: push, search i pop. Przeprowadzone są dla różnych rozmiarów zbiorów (100, 500, 1000), co pozwala ocenić, jak różne implementacje skalują się w zależności od liczby elementów.

Dodawanie (push):

SetHashed i SetSimple działają najszybciej.

LinkedSet działa wolniej, ze złożonością O(n).

Wyszukiwanie (search):

SetHashed i SetSimple również powinny być najszybsze, średnia złożoność O(1)

LinkedSet ma O(n) w najgorszym przypadku, ponieważ musi przejść przez wszystkie elementy.

Usuwanie (pop):

SetHashed i SetSimple będą najszybsze, z O(1) średnio dla każdego elementu

LinkedSet ma O(n) dla usuwania, ponieważ musi przejść przez całą listę.

Odpowiedź na pytanie
Dla małych zbiorów (np. do 500 elementów): Może się okazać, że różnice między implementacjami nie będą zauważalne, ale SimpleDict i LinkedSet mogą oferować wystarczającą wydajność. SetHashed będzie najczęściej lepsze dla większych zbiorów, ale w przypadku małych danych różnice mogą być marginalne.

Dla dużych zbiorów (powyżej 1000 elementów): SetHashed będzie zdecydowanie najwydajniejsze, szczególnie w operacjach wyszukiwania i usuwania, dzięki swojej średniej złożoności O(1). LinkedSet stanie się zauważalnie wolniejsze, a SimpleDict pamięciowo będzie zbyt kosztowny.
